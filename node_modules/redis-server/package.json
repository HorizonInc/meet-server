{
  "_from": "redis-server",
  "_id": "redis-server@1.1.0",
  "_inBundle": false,
  "_integrity": "sha1-TYAB2Pcmq+lmsvf13OOcYj73I4U=",
  "_location": "/redis-server",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "redis-server",
    "fetchSpec": "latest",
    "name": "redis-server",
    "raw": "redis-server",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/redis-server/-/redis-server-1.1.0.tgz",
  "_shasum": "4d8001d8f726abe966b2f7f5dce39c623ef72385",
  "_shrinkwrap": null,
  "_spec": "redis-server",
  "_where": "/Users/mairdavda/Desktop/Jesse/Meet",
  "author": {
    "email": "brandon.zacharie@gmail.com",
    "name": "Brandon Zacharie"
  },
  "bugs": {
    "url": "https://github.com/BrandonZacharie/node-redis-server/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "promise-queue": "^2.2.3"
  },
  "deprecated": false,
  "description": "Start and stop a Redis server.",
  "devDependencies": {
    "chai": "^3.5.0",
    "coveralls": "^2.11.15",
    "eslint": "^3.13.0",
    "istanbul": "^0.4.5",
    "mocha": "^3.1.2"
  },
  "engines": {
    "node": ">=4.0.0"
  },
  "homepage": "https://github.com/BrandonZacharie/node-redis-server#readme",
  "keywords": [
    "Redis",
    "manager",
    "server"
  ],
  "license": "MIT",
  "main": "RedisServer.js",
  "name": "redis-server",
  "optionalDependencies": {},
  "readme": "# redis-server\n\n[![NPM version](https://img.shields.io/npm/v/redis-server.svg)](https://www.npmjs.com/package/redis-server)\n[![Build Status](https://img.shields.io/travis/BrandonZacharie/node-redis-server/master.svg)](https://travis-ci.org/BrandonZacharie/node-redis-server)\n[![Coverage Status](https://img.shields.io/coveralls/BrandonZacharie/node-redis-server/master.svg)](https://coveralls.io/github/BrandonZacharie/node-redis-server?branch=master)\n[![License](https://img.shields.io/npm/l/redis-server.svg)](https://github.com/BrandonZacharie/node-redis-server/blob/master/LICENSE.md)\n\nStart and stop a local Redis server in Node.js like a boss.\n\n## Installation\n\n```Bash\n\nnpm install redis-server\n\n```\n\n## Usage\n\nThe constructor exported by this module optionally accepts a single argument;\na number or string that is a port or an object for configuration.\n\n### Basic Example\n\n```JavaScript\n\nconst RedisServer = require('redis-server');\n\n// Simply pass the port that you want a Redis server to listen on.\nconst server = new RedisServer(6379);\n\nserver.open((err) => {\n  if (err === null) {\n    // You may now connect a client to the Redis\n    // server bound to `server.port` (e.g. 6379).\n  }\n});\n\n```\n\n### Configuration\n\n| Property | Type   | Default      | Description\n|:---------|:-------|:-------------|:-----------\n| bin      | String | redis-server | A path to a Redis server binary.\n| conf     | String |              | A path to a Redis server configuration file.\n| port     | Number | 6379         | A port to bind a server to.\n| slaveof  | String |              | An address of a server to sync with.\n\nA Redis server binary must be available. If you do not have one in $PATH,\nprovide a path in configuration.\n\n```JavaScript\n\nconst server = new RedisServer({\n  port: 6379,\n  bin: '/opt/local/bin/redis-server'\n});\n\n```\n\nYou may use a Redis configuration file instead of configuration object\nproperties that are flags (i.e. `port` and `slaveof`). If `conf` is\nprovided, no flags will be passed to the binary.\n\n```JavaScript\n\nconst server = new RedisServer({\n  conf: '/path/to/redis.conf'\n});\n\n```\n\n### Methods\n\nFor methods that accept `callback`, `callback` will receive an `Error`\nas the first argument if a problem is detected; `null`, if not.\n\n#### RedisServer#open()\n\nAttempt to open a Redis server. Returns a `Promise`.\n\n##### Promise style `open()`\n\n``` JavaScript\n\nserver.open().then(() => {\n  // You may now connect a client to the Redis server bound to `server.port`.\n});\n\n```\n\n##### Callback style `open()`\n\n``` JavaScript\n\nserver.open((err) => {\n  if (err === null) {\n    // You may now connect a client to the Redis server bound to `server.port`.\n  }\n});\n\n```\n\n#### RedisServer#close()\n\nClose the associated Redis server. Returns a `Promise`. NOTE: Disconnect\nclients prior to calling this method to avoid receiving connection\nerrors from clients.\n\n##### Promise style `close()`\n\n``` JavaScript\n\nserver.close().then(() => {\n  // The associated Redis server is now closed.\n});\n\n```\n\n##### Callback style `close()`\n\n``` JavaScript\n\nserver.close((err) => {\n  // The associated Redis server is now closed.\n});\n\n```\n\n### Properties\n\n#### RedisServer#isOpening\n\nDetermine if the instance is starting a Redis server; `true` while a\nprocess is spawning, and/or about to be spawned, until the contained Redis\nserver either starts or errs.\n\n#### RedisServer#isRunning\n\nDetermine if the instance is running a Redis server; `true` once a process\nhas spawned and the contained Redis server is ready to service requests.\n\n#### RedisServer#isClosing\n\nDetermine if the instance is closing a Redis server; `true` while a\nprocess is being, or about to be, killed until the contained Redis server either\ncloses or errs.\n\n### Events\n\n#### stdout\n\nEmitted when a Redis server prints to stdout.\n\n#### opening\n\nEmitted when attempting to start a Redis server.\n\n#### open\n\nEmitted when a Redis server becomes ready to service requests.\n\n#### closing\n\nEmitted when attempting to stop a Redis server.\n\n#### close\n\nEmitted once a Redis server has stopped.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/BrandonZacharie/node-redis-server.git"
  },
  "scripts": {
    "lint": "eslint --ignore-path .gitignore **/*.js",
    "test": "istanbul cover -x test.js node_modules/.bin/_mocha"
  },
  "version": "1.1.0"
}
